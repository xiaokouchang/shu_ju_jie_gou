#pragma once

//树
//typedef int DataType;
////左孩子右兄弟表示法
//struct Node
//{
//	struct Node* firstChild1;   //第一个孩子结点
//	struct Node* pNextBrother;  //指向其下一个兄弟结点
//	DataType data;			    //结点中的数据域
//};

//一棵二叉树是结点的一个有限集合,该集合:
//1.或者为空
//2.由一个根结点加上两棵别称为左子树和右子树的二叉树组成


//高度为h的满二叉树有多少节点:2^k-1


//满二叉树:一个二叉树,如果每一个层的结点数都达到最大值,则这个二叉树就是满二叉树。
//如果一个二叉树的层数为K,且结点总数是,则它就是满二叉树。
//完全二叉树:完全二叉树是效率很高的数据结构,完全二叉树是由满二叉树而引出来的。
//对于深度为K的,有n个结点的二叉树,
//当且仅当其每一个结点都与深度为K的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树。
//要注意的是满二叉树是一种特殊的完全二叉树。


//前n-1层是满的,最后一层从左到右是连续的


//高度为h的完全二叉树,节点数量的范围[2^(h-1),2^h-1],最少是前n-1层全满,最多是满二叉树

//二叉树的性质
//1.若规定根结点的层数为1,则一棵非空二叉树的第i层上最多有2^{(i-1)}个结点
//2.若规定根结点的层数为1,则深度为h的二叉树的最大结点数是2^h-1
//3.对任何一棵二叉树,如果度为0其叶结点个数为n0,度为2的分支结点个数为n2,则有n0＝n2＋1
//(度为0的永远比度为2的多一个)
//4.若规定根结点的层数为1,具有n个结点的满二叉树的深度,h=log2(n+1)
//(ps:log2(n+1)是log以2为底,n+1为对数)
//5.对于具有n个结点的完全二叉树,如果按照从上至下从左至右的数组顺序对所有结点从0开始编号,
//则对于序号为i的结点有:
//1.若i > 0,i位置结点的双亲序号:(i-1)/2;i=0,i为根结点编号,无双亲结点
//2.若2i+1=n否则无左孩子
//3.若2i+2=n否则无右孩子
//完全二叉树度为1的结点是1或0